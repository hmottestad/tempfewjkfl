{"version":3,"sources":["../../src/RdfToJsonLD.js"],"names":["RdfToJsonLD","tempJsonLd","subject","predicate","objectIndex","list","node","undefined","push","rdfText","Promise","resolve","reject","env","environment","expand","value","indexOf","toString","graph","createGraph","turtleParser","TurtleParser","parse","forEach","triple","nodeType","nominalValue","object","type","datatype","resolvedDatatype","language","Object","keys","map","key","filter","Array","isArray","convertRdfListToArray","realJsonLd"],"mappings":"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","file":"RdfToJsonLD.js","sourcesContent":["import rdf from \"rdf\";\n\nclass RdfToJsonLD {\n\n\n    static convertRdfListToArray(tempJsonLd, subject, predicate, objectIndex) {\n\n        let list = [];\n\n        let node = tempJsonLd[subject[predicate][objectIndex][\"@id\"]];\n\n        while (node !== undefined) {\n\n            list.push(node[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#first\"][0]);\n\n            node = tempJsonLd[node[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#rest\"][0][\"@id\"]];\n\n\n        }\n\n        subject[predicate][objectIndex] = {\"@list\": list};\n\n\n    }\n\n\n    static rdfToJsonld(rdfText) {\n        return new Promise(function (resolve, reject) {\n\n\n            const env = rdf.environment;\n\n            function expand(value) {\n                if(value.indexOf(':')<0 || value.indexOf(\"//\")>=0 ) return value.toString();\n                return env.resolve(value)||value.toString();\n            };\n\n            // rdf.setBuiltins();\n\n\n            let graph = env.createGraph();\n            let turtleParser = new rdf.TurtleParser();\n            turtleParser.parse(rdfText, function () {\n\n                let tempJsonLd = {};\n\n                graph.forEach(triple => {\n                    // triple.subject.nominalValue = triple.subject.nominalValue.resolve();\n                    if(triple.subject.nodeType() === \"BlankNode\" && triple.subject.nominalValue.indexOf(\"_:\") < 0){\n                        triple.subject.nominalValue = \"_:\"+triple.subject.nominalValue;\n\n                    }\n                    // triple.predicate.nominalValue = triple.predicate.nominalValue.resolve();\n\n                    if (!tempJsonLd[triple.subject.nominalValue]) {\n                        tempJsonLd[triple.subject.nominalValue] = {\"@id\": triple.subject.nominalValue};\n                    }\n\n                    if (triple.predicate.nominalValue === \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\") {\n                        if (!tempJsonLd[triple.subject.nominalValue][\"@type\"]) {\n                            tempJsonLd[triple.subject.nominalValue][\"@type\"] = [];\n                        }\n\n                        tempJsonLd[triple.subject.nominalValue][\"@type\"].push(triple.object.nominalValue);\n\n\n                    }\n\n                    if (!tempJsonLd[triple.subject.nominalValue][triple.predicate.nominalValue]) {\n                        tempJsonLd[triple.subject.nominalValue][triple.predicate.nominalValue] = [];\n                    }\n\n                    let object = {};\n\n                    let type = triple.object.nodeType();\n\n\n                    if (type === \"IRI\") {\n                        object[\"@id\"] = triple.object.nominalValue;\n                    } else if(type === \"BlankNode\"){\n                        if(triple.object.nominalValue.indexOf(\"_:\") < 0){\n                            object[\"@id\"] = \"_:\"+triple.object.nominalValue;\n                        }else{\n                            object[\"@id\"] = triple.object.nominalValue;\n\n                        }\n                    } else {\n                        object[\"@value\"] = triple.object.nominalValue;\n                        if (triple.object.datatype) {\n\n                            let resolvedDatatype =expand(triple.object.datatype);\n                            object[\"@type\"] = resolvedDatatype;\n\n                        }\n                        if (triple.object.language) {\n                            object[\"@language\"] = triple.object.language;\n                        }\n                    }\n\n\n                    tempJsonLd[triple.subject.nominalValue][triple.predicate.nominalValue].push(object);\n\n\n                });\n\n\n                Object\n                    .keys(tempJsonLd)\n                    .map(key => tempJsonLd[key])\n                    .filter(subject => subject[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#first\"] === undefined)\n                    .forEach(subject => {\n\n                        Object.keys(subject)\n                            .filter(predicate => Array.isArray(subject[predicate]))\n                            .forEach(predicate => {\n                                for (let objectIndex in subject[predicate]) {\n                                    let object = subject[predicate][objectIndex];\n                                    if (object[\"@id\"] === undefined) continue;\n\n                                    if (tempJsonLd[object[\"@id\"]] !== undefined && tempJsonLd[object[\"@id\"]][\"http://www.w3.org/1999/02/22-rdf-syntax-ns#first\"] !== undefined) {\n                                        RdfToJsonLD.convertRdfListToArray(tempJsonLd, subject, predicate, objectIndex);\n                                    }\n\n                                }\n\n\n                            })\n                    });\n\n\n                let realJsonLd = [];\n\n                Object.keys(tempJsonLd)\n                    .filter(key => tempJsonLd[key][\"http://www.w3.org/1999/02/22-rdf-syntax-ns#first\"] === undefined)\n                    .forEach(key => realJsonLd.push(tempJsonLd[key]));\n\n\n                resolve(realJsonLd);\n\n            }, \"\", null, graph);\n\n\n\n        });\n    }\n\n}\n\n\n\n\nexport default RdfToJsonLD;"]}