{"version":3,"sources":["../../../src/SHACL/PropertyShape.js"],"names":["PropertyShape","jsonld","shape","datatype","undefined","class","or","nodeKind","in","minCount","maxCount"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;IAEMA,a;;;;;;;oCAGiBC,M,EAAQC,K,EAAO;;AAG9B,gBAAID,OAAO,gBAAME,QAAb,MAA2BC,SAA/B,EAA0C;AACtC,uBAAO,oCAA0BH,MAA1B,EAAkCC,KAAlC,CAAP;AACH;;AAED,gBAAID,OAAO,gBAAMI,KAAb,MAAwBD,SAA5B,EAAuC;AACnC,uBAAO,iCAAuBH,MAAvB,EAA+BC,KAA/B,CAAP;AACH;;AAED,gBAAID,OAAO,gBAAMK,EAAb,MAAqBF,SAAzB,EAAoC;AAChC,uBAAO,8BAAoBH,MAApB,EAA4BC,KAA5B,CAAP;AACH;;AAGD,gBAAID,OAAO,gBAAMM,QAAb,MAA2BH,SAA/B,EAA0C;AACtC,uBAAO,oCAA0BH,MAA1B,EAAkCC,KAAlC,CAAP;AACH;;AAGD,gBAAID,OAAO,gBAAMO,EAAb,MAAqBJ,SAAzB,EAAoC;AAChC,uBAAO,8BAAoBH,MAApB,EAA4BC,KAA5B,CAAP;AACH;;AAED,gBAAID,OAAO,gBAAMQ,QAAb,MAA2BL,SAA/B,EAA0C;AACtC,uBAAO,uCAA6BH,MAA7B,EAAqCC,KAArC,CAAP;AACH;;AAED,gBAAID,OAAO,gBAAMS,QAAb,MAA2BN,SAA/B,EAA0C;AACtC,uBAAO,uCAA6BH,MAA7B,EAAqCC,KAArC,CAAP;AACH;;AAGD,kBAAM,eAAN;AAGH;;;;;;kBAIUF,a","file":"PropertyShape.js","sourcesContent":["import MinMaxCountPropertyShape from \"./MinMaxCountPropertyShape.js\";\nimport NodeKindPropertyShape from \"./NodeKindPropertyShape.js\";\nimport DatatypePropertyShape from \"./DatatypePropertyShape.js\";\nimport ClassPropertyShape from \"./ClassPropertyShape.js\";\nimport OrPropertyShape from \"./OrPropertyShape.js\";\nimport InPropertyShape from \"./InPropertyShape.js\";\n\nimport Shacl from \"./Shacl.js\";\n\nclass PropertyShape {\n\n\n    static getInstance(jsonld, shape) {\n\n\n        if (jsonld[Shacl.datatype] !== undefined) {\n            return new DatatypePropertyShape(jsonld, shape);\n        }\n\n        if (jsonld[Shacl.class] !== undefined) {\n            return new ClassPropertyShape(jsonld, shape);\n        }\n\n        if (jsonld[Shacl.or] !== undefined) {\n            return new OrPropertyShape(jsonld, shape);\n        }\n\n\n        if (jsonld[Shacl.nodeKind] !== undefined) {\n            return new NodeKindPropertyShape(jsonld, shape);\n        }\n\n\n        if (jsonld[Shacl.in] !== undefined) {\n            return new InPropertyShape(jsonld, shape);\n        }\n\n        if (jsonld[Shacl.minCount] !== undefined) {\n            return new MinMaxCountPropertyShape(jsonld, shape);\n        }\n\n        if (jsonld[Shacl.maxCount] !== undefined) {\n            return new MinMaxCountPropertyShape(jsonld, shape);\n        }\n\n\n        throw \"Unknown shape\";\n\n\n    }\n\n}\n\nexport default PropertyShape;"]}