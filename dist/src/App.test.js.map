{"version":3,"sources":["../../src/App.test.js"],"names":["equal","console","log","rdfText","convertRdfListToArray","tempJsonLd","subject","predicate","objectIndex","list","node","undefined","push","k","Promise","resolve","reject","env","environment","graph","createGraph","turtleParser","TurtleParser","temp","parse","forEach","triple","nominalValue","object","type","nodeType","indexOf","datatype","language","Object","keys","map","key","filter","Array","isArray","realJsonLd","then","JSON","stringify","jsonld"],"mappings":"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","file":"App.test.js","sourcesContent":["import React from \"react\";\nimport it from \"it-is\";\nimport rdf from \"rdf\";\nimport IndexedGraph from \"rdf\";\n\nit('renders without crashing', () => {\n\n\n});\n\nit(\"hello\").equal(\"hello\")\n// it(\"hello\").equal(\"nay\")\n\n\nconsole.log(\"HERE\");\n\nlet rdfText = `\n@prefix c: <http://example.org/cartoons#>.\nc:Tom a c:Cat.\nc:Jerry a c:Mouse;\n        c:label \"hello\";\n        c:age 3;\n        c:name \"Jerry\"@en;\n        c:list ([] [] [c:know c:Tom;]) ;\n        c:smarterThan c:Tom, [].\n`;\n\n\nfunction convertRdfListToArray(tempJsonLd, subject, predicate, objectIndex){\n\n    let list = [];\n\n    let node = tempJsonLd[subject[predicate][objectIndex][\"@id\"]];\n\n    while(node !== undefined){\n\n        list.push(node[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#first\"][0]);\n\n        node = tempJsonLd[node[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#rest\"][0][\"@id\"]];\n\n\n\n    }\n\n    subject[predicate][objectIndex] = {\"@list\":list};\n\n    console.log(subject[predicate][objectIndex])\n}\n\n\n\nlet k = new Promise(function(resolve, reject) {\n\n    var env=rdf.environment;\n\n    let graph = env.createGraph();\n    let turtleParser = new rdf.TurtleParser();\n    let temp = turtleParser.parse(rdfText, function(){\n\n        let tempJsonLd = {};\n\n        graph.forEach(triple =>  {\n            if(!tempJsonLd[triple.subject.nominalValue]){\n                tempJsonLd[triple.subject.nominalValue] = {\"@id\":triple.subject.nominalValue};\n            }\n\n            if(triple.predicate.nominalValue === \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"){\n                if(!tempJsonLd[triple.subject.nominalValue][\"@type\"]){\n                    tempJsonLd[triple.subject.nominalValue][\"@type\"] = [];\n                }\n\n                tempJsonLd[triple.subject.nominalValue][\"@type\"].push(triple.object.nominalValue);\n\n\n            }\n\n            if(!tempJsonLd[triple.subject.nominalValue][triple.predicate.nominalValue]){\n                tempJsonLd[triple.subject.nominalValue][triple.predicate.nominalValue] = [];\n            }\n\n            let object = {};\n\n            let type = triple.object.nodeType();\n\n            if(type.indexOf(\"Literal\") < 0){\n                object[\"@id\"] = triple.object.nominalValue;\n            }else{\n                object[\"@value\"] =triple.object.nominalValue;\n                if(triple.object.datatype){\n                    object[\"@datatype\"] =triple.object.datatype;\n                }\n                if(triple.object.language){\n                    object[\"@language\"] =triple.object.language;\n                }\n            }\n\n\n            tempJsonLd[triple.subject.nominalValue][triple.predicate.nominalValue].push(object);\n\n\n\n        });\n\n\n\n        Object\n            .keys(tempJsonLd)\n            .map( key => tempJsonLd[key])\n            .filter(subject => subject[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#first\"] === undefined)\n            .forEach(subject => {\n\n            Object.keys(subject)\n                .filter(predicate => Array.isArray(subject[predicate]))\n                .forEach(predicate => {\n                   for(let objectIndex in subject[predicate]){\n                       let object = subject[predicate][objectIndex];\n                       if(object[\"@id\"] === undefined) continue;\n\n                       if(tempJsonLd[object[\"@id\"]] !== undefined && tempJsonLd[object[\"@id\"]][\"http://www.w3.org/1999/02/22-rdf-syntax-ns#first\"] !== undefined){\n                           convertRdfListToArray(tempJsonLd, subject, predicate, objectIndex);\n                       }\n\n                   }\n\n\n            })\n        })\n\n\n\n\n        let realJsonLd = [];\n\n        Object.keys(tempJsonLd)\n            .filter(key => tempJsonLd[key][\"http://www.w3.org/1999/02/22-rdf-syntax-ns#first\"] === undefined)\n            .forEach(key => realJsonLd.push(tempJsonLd[key]));\n\n        resolve(realJsonLd);\n\n    }, \"\", null, graph);\n\n\n\n} );\n\nk.then(jsonld => console.log(JSON.stringify(jsonld, null, 4)))\n"]}