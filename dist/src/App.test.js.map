{"version":3,"sources":["../../src/App.test.js"],"names":["readdir","err","testCases","forEach","Promise","resolve","reject","readFile","testCase","shacl","rdfToJsonld","then","jsonld","passFiles","shaclValidator","pass","turtle","catch","console","error","valid","validate","failure","severity","Violation","log","equal","failFile","fail"],"mappings":"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","file":"App.test.js","sourcesContent":["import React from \"react\";\nimport it from \"it-is\";\nimport RdfToJsonLD from \"./RdfToJsonLD.js\";\nimport fs from \"fs\";\nimport Shacl from \"./SHACL/Shacl.js\";\n\nit('renders without crashing', () => {\n\n\n});\n\nfs.readdir(\"../test-files/\", (err, testCases) => {\n    // console.log(testCases);\n    testCases.forEach(testCase => {\n        // console.log(testCase);\n\n        new Promise(function (resolve, reject) {\n                fs.readFile(\"../test-files/\" + testCase + \"/shacl.ttl\", \"utf-8\", (err, shacl) => {\n                    RdfToJsonLD\n                        .rdfToJsonld(shacl).then(jsonld => resolve(jsonld))\n                    // .catch(error => console.log(error));\n                })\n            }\n        )\n            .then(shacl => {\n\n                fs.readdir(\"../test-files/\" + testCase + \"/pass\", (err, passFiles) => {\n\n                    passFiles.forEach(pass => {\n                        // console.log(pass);\n\n                        let shaclValidator = new Shacl(shacl);\n\n                        fs.readFile(\"../test-files/\" + testCase + \"/pass/\" + pass, \"utf-8\", (err, turtle) => {\n                            RdfToJsonLD\n                                .rdfToJsonld(turtle)\n                                .catch(error => console.error(`Error while reading ${testCase}/pass/${pass}\\n`, error))\n                                .then(jsonld => {\n\n                                    let valid = true;\n\n                                    shaclValidator.validate(jsonld, failure => {\n                                        if (failure.severity === Shacl.Violation) {\n                                            valid = false;\n                                            console.log(failure);\n                                        }\n                                    });\n\n                                    if(!valid){\n                                        console.log(\"here\")\n                                    }\n                                    it(valid).equal(true, `Validation should have passed for: ${testCase}/pass/${pass}`);\n\n                                })\n                                .catch(error => console.error(`Error while reading or validating ${testCase}/pass/${pass}\\n`, error));\n                        });\n\n                    });\n                });\n\n\n                fs.readdir(\"../test-files/\" + testCase + \"/fail\", (err, failFile) => {\n\n\n                    failFile.forEach(fail => {\n                        let shaclValidator = new Shacl(shacl);\n\n                        fs.readFile(\"../test-files/\" + testCase + \"/fail/\" + fail, \"utf-8\", (err, turtle) => {\n                            RdfToJsonLD\n                                .rdfToJsonld(turtle)\n                                .catch(error => console.error(`Error while reading ${testCase}/fail/${fail}\\n`, error))\n                                .then(jsonld => {\n\n                                    let valid = true;\n\n                                    shaclValidator.validate(jsonld, failure => {\n                                        if (failure.severity === Shacl.Violation) {\n                                            valid = false;\n                                            // console.log(failure);\n                                        }\n                                    });\n\n                                    it(valid).equal(false, `Validation should have failed for: ${testCase}/fail/${fail}`);\n\n                                })\n                                .catch(error => console.log(`Error while reading or validating ${testCase}/fail/${fail}`, error));\n                        });\n                    })\n                });\n\n\n            });\n\n\n    });\n});\n"]}